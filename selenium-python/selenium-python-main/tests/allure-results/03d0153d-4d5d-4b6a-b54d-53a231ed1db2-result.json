{"name": "Verify that user is able to edit the parent page of the sibbling page successfully", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: target frame detached\n  (failed to check if window was closed: disconnected: Unable to receive message from renderer)\n  (Session info: chrome=126.0.6478.185)\nStacktrace:\n\tGetHandleVerifier [0x00007FF72136EEB2+31554]\n\t(No symbol) [0x00007FF7212E7EE9]\n\t(No symbol) [0x00007FF7211A8559]\n\t(No symbol) [0x00007FF721190C81]\n\t(No symbol) [0x00007FF72118EC6D]\n\t(No symbol) [0x00007FF72118F47F]\n\t(No symbol) [0x00007FF72119E25E]\n\t(No symbol) [0x00007FF7211B6A04]\n\t(No symbol) [0x00007FF72123CAA4]\n\t(No symbol) [0x00007FF72121CDD3]\n\t(No symbol) [0x00007FF7211EA33B]\n\t(No symbol) [0x00007FF7211EAED1]\n\tGetHandleVerifier [0x00007FF721678B2D+3217341]\n\tGetHandleVerifier [0x00007FF7216C5AF3+3532675]\n\tGetHandleVerifier [0x00007FF7216BB0F0+3489152]\n\tGetHandleVerifier [0x00007FF72141E786+750614]\n\t(No symbol) [0x00007FF7212F376F]\n\t(No symbol) [0x00007FF7212EEB24]\n\t(No symbol) [0x00007FF7212EECB2]\n\t(No symbol) [0x00007FF7212DE17F]\n\tBaseThreadInitThunk [0x00007FFC13A27374+20]\n\tRtlUserThreadStart [0x00007FFC1485CC91+33]", "trace": "self = <tests.test_DA_MP.test_DA_MP testMethod=test_DA_MP_TC023_1>\ninput_config = <src.automation.config.SeleniumConfig object at 0x0000021F190372F0>\n\n    @pytest.fixture(autouse=True)\n    def before_test(self, input_config):\n        Selenium.navigate(input_config)\n        Selenium.maximize()\n>       Selenium.close_notification()\n\ntest_base.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\src\\automation\\__init__.py:25: in close_notification\n    return Selenium.driver.close_notification()\n..\\src\\automation\\driver\\__init__.py:46: in close_notification\n    close_button = WebDriverWait(self._driver, 10).until(\nC:\\Users\\trung.dang\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:96: in until\n    value = method(self._driver)\nC:\\Users\\trung.dang\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:363: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\nC:\\Users\\trung.dang\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:741: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\trung.dang\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021F19037D70>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"target frame detached\",\"message\":\"target frame detached\\\\n  (failed to ch...07FF7212DE17F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC13A27374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFC1485CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: target frame detached\nE         (failed to check if window was closed: disconnected: Unable to receive message from renderer)\nE         (Session info: chrome=126.0.6478.185)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF72136EEB2+31554]\nE       \t(No symbol) [0x00007FF7212E7EE9]\nE       \t(No symbol) [0x00007FF7211A8559]\nE       \t(No symbol) [0x00007FF721190C81]\nE       \t(No symbol) [0x00007FF72118EC6D]\nE       \t(No symbol) [0x00007FF72118F47F]\nE       \t(No symbol) [0x00007FF72119E25E]\nE       \t(No symbol) [0x00007FF7211B6A04]\nE       \t(No symbol) [0x00007FF72123CAA4]\nE       \t(No symbol) [0x00007FF72121CDD3]\nE       \t(No symbol) [0x00007FF7211EA33B]\nE       \t(No symbol) [0x00007FF7211EAED1]\nE       \tGetHandleVerifier [0x00007FF721678B2D+3217341]\nE       \tGetHandleVerifier [0x00007FF7216C5AF3+3532675]\nE       \tGetHandleVerifier [0x00007FF7216BB0F0+3489152]\nE       \tGetHandleVerifier [0x00007FF72141E786+750614]\nE       \t(No symbol) [0x00007FF7212F376F]\nE       \t(No symbol) [0x00007FF7212EEB24]\nE       \t(No symbol) [0x00007FF7212EECB2]\nE       \t(No symbol) [0x00007FF7212DE17F]\nE       \tBaseThreadInitThunk [0x00007FFC13A27374+20]\nE       \tRtlUserThreadStart [0x00007FFC1485CC91+33]\n\nC:\\Users\\trung.dang\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "start": 1721990624859, "stop": 1721990624859, "uuid": "d7861337-719d-4f59-81ea-11ea09b5d716", "historyId": "4513c58aa33e8795057901d3ab92683b", "testCaseId": "4513c58aa33e8795057901d3ab92683b", "fullName": "tests.test_DA_MP.test_DA_MP#test_DA_MP_TC023_1", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_DA_MP"}, {"name": "subSuite", "value": "test_DA_MP"}, {"name": "host", "value": "AGD14040"}, {"name": "thread", "value": "11164-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_DA_MP"}]}